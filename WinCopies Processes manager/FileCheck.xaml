<dialogs:DialogWindow x:Class="WinCopiesProcessesManager.FileCheck"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WinCopiesProcessesManager"
                  xmlns:gui="clr-namespace:WinCopies.GUI;assembly=WinCopies.GUI"
                      xmlns:dialogs="clr-namespace:WinCopies.GUI.Windows.Dialogs;assembly=WinCopies.GUI"
        xmlns:windows="clr-namespace:WinCopies.GUI.Windows.Dialogs;assembly=WinCopies.GUI.Windows"
                      xmlns:converters="clr-namespace:WinCopies.Util.DataConverters;assembly=WinCopies.Util"
        mc:Ignorable="d"
        Title="FileCheck" Height="450" Width="800">
    <dialogs:DialogWindow.Resources>
        <converters:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
        <Style x:Key="DataGridStyle" TargetType="{x:Type DataGrid}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderBrush" Value="#FF688CAF"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGrid}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                                <ScrollViewer.Template>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                            <StackPanel Grid.ColumnSpan="3" Grid.Row="1" >
                                                <CheckBox Content="{StaticResource ShowAll}" IsChecked="{Binding ShowAll, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FileCheck}}}" />
                                                <CheckBox Content="{StaticResource ApplyToAll}" IsChecked="{Binding ApplyToAll, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FileCheck}}}" />
                                            </StackPanel>
                                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="2"/>
                                            <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="2" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                            <Grid Grid.Column="1" Grid.Row="3">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </ScrollViewer.Template>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
    </dialogs:DialogWindow.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>
        <DataGrid Style="{DynamicResource DataGridStyle}" IsEnabled="{Binding HowToRetry, Converter={converters:EnumToBooleanConverter}, ConverterParameter={x:Static local:HowToRetry.CheckFiles}}" ItemsSource="{Binding Items}" AutoGenerateColumns="False" CanUserAddRows="False" RowDetailsVisibilityMode="Visible">
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Fichier à copier"  >
                    <DataGridTemplateColumn.CellTemplate>
                        <ItemContainerTemplate>
                            <local:FileSummary DataContext="{Binding FileToCopy}" />
                        </ItemContainerTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="Fichier déjà dans le répertoire" >
                    <DataGridTemplateColumn.CellTemplate>
                        <ItemContainerTemplate>
                            <local:FileSummary DataContext="{Binding FileThatAlreadyExists}" />
                        </ItemContainerTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>

            <DataGrid.RowDetailsTemplate>
                <DataTemplate >
                    <Label >
                        <Label.Content>
                            <MultiBinding Converter="{local:FileCheckFileContentConverter}" >
                                <Binding Path="ComputingContent" />
                                <Binding Path="FilesHaveSameContent" />
                            </MultiBinding>
                        </Label.Content>
                    </Label>
                </DataTemplate>
            </DataGrid.RowDetailsTemplate>

            <DataGrid.CellStyle>
                <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}" >
                    <Setter Property="Background" Value="{x:Null}" />
                    <Setter Property="Foreground" Value="{x:Static SystemColors.ControlTextBrush}" />

                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="true" >
                            <Setter Property="Background" Value="{x:Null}" />
                            <Setter Property="Foreground" Value="{x:Static SystemColors.ControlTextBrush}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.CellStyle>

            <DataGrid.RowStyle>
                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}" >
                    <Setter Property="Background" Value="{x:Null}" />

                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="true" >
                            <Setter Property="Background" Value="{x:Null}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
        </DataGrid>
        <StackPanel Grid.Row="1">
            <RadioButton Content="{StaticResource ChooseFileByFile}" IsChecked="{Binding HowToRetry, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static local:HowToRetry.CheckFiles}}" />
            <RadioButton Content="{StaticResource RenameWhenNotSameContent}" IsChecked="{Binding HowToRetry, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static local:HowToRetry.RenameWhenNotSameContent}}" />
            <RadioButton Content="{StaticResource ReplaceWhenNotSameContent}" IsChecked="{Binding HowToRetry, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static local:HowToRetry.ReplaceWhenNotSameContent}}" />
        </StackPanel>
    </Grid>
</dialogs:DialogWindow>
